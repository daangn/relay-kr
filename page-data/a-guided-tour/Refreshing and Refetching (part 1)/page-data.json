{
    "componentChunkName": "component---src-templates-docs-js",
    "path": "/a-guided-tour/Refreshing and Refetching (part 1)",
    "result": {"data":{"site":{"siteMetadata":{"title":"Relay | daangn","docsLocation":"https://github.com/daangn/relay-kr/tree/main/content"}},"mdx":{"fields":{"id":"9f77ab09-5960-5bdf-b583-44005b0c601c","title":"Refreshing And Refetching Part 1","slug":"/a-guided-tour/Refreshing and Refetching (part 1)"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Refreshing Queries\"), mdx(\"p\", null, \"Refreshing Queries (\\uCFFC\\uB9AC \\uC0C8\\uB85C\\uACE0\\uCE68) \\uC740 \\uC11C\\uBC84\\uC5D0\\uC11C \\uD574\\uB2F9 \\uB370\\uC774\\uD130\\uC758 \\uCD5C\\uC2E0 \\uBC84\\uC804\\uC744 \\uC5BB\\uAE30 \\uC704\\uD574 \\uC6D0\\uB798 \\uCFFC\\uB9AC\\uC5D0 \\uC758\\uD574 \\uB80C\\uB354\\uB9C1\\uB41C \\uAC83\\uACFC \\uB611\\uAC19\\uC740 \\uB370\\uC774\\uD130\\uB97C \\uAC00\\uC838\\uC624\\uB294 \\uAC83\\uC785\\uB2C8\\uB2E4.\"), mdx(\"h2\", null, \"real-time features(\\uC2E4\\uC2DC\\uAC04 \\uAE30\\uB2A5\\uB4E4) \\uC774\\uC6A9\\uD558\\uAE30\"), mdx(\"p\", null, \"\\uC11C\\uBC84\\uC758 \\uCD5C\\uC2E0\\uBC84\\uC804\\uC73C\\uB85C \\uB370\\uC774\\uD130\\uB97C \\uCD5C\\uC2E0 \\uC0C1\\uD0DC\\uB85C \\uC720\\uC9C0 \\uD558\\uAE30\\uC704\\uD574\\uC11C \\uAC00\\uC7A5 \\uBA3C\\uC800 \\uACE0\\uB824\\uD560 \\uC0AC\\uD56D\\uC740 \\uC790\\uB3D9\\uC73C\\uB85C \\uB370\\uC774\\uD130\\uB97C \\uC5C5\\uB370\\uC774\\uD2B8\\uC2DC\\uCF1C\\uC8FC\\uACE0 \\uC8FC\\uAE30\\uC801\\uC73C\\uB85C \\uC0C8\\uB85C\\uACE0\\uCE68\\uD574\\uC8FC\\uB294 \\uC2E4\\uC2DC\\uAC04 \\uAE30\\uB2A5\\uB4E4\\uC744 \\uC774\\uC6A9\\uD558\\uB294 \\uAC83\\uC774 \\uC801\\uC808\\uD55C\\uC9C0 \\uC5EC\\uBD80\\uC785\\uB2C8\\uB2E4.\"), mdx(\"p\", null, \"real-time features(\\uC2E4\\uC2DC\\uAC04 \\uAE30\\uB2A5\\uB4E4) \\uC5D0 \\uD55C \\uAC00\\uC9C0 \\uC608\\uB85C\\uB294 \\uC11C\\uBC84\\uAC00 \\uD074\\uB77C\\uC774\\uC5B8\\uD2B8\\uC5D0\\uAC8C \\uD574\\uB2F9 \\uCFFC\\uB9AC\\uC758 \\uC815\\uBCF4\\uAC00 \\uBC14\\uB014\\uB54C \\uB9C8\\uB2E4 \\uC54C\\uB824\\uC8FC\\uB294  GQLS(GraphQL Subscriptions) \\uAC00 \\uC788\\uC2B5\\uB2C8\\uB2E4. - \\uC11C\\uBC84\\uB098 \\uB124\\uD2B8\\uC6CC\\uD06C \\uB808\\uC774\\uC5B4\\uC5D0 \\uCD94\\uAC00\\uC801\\uC778 \\uC124\\uC815\\uC774 \\uD544\\uC694\\uD568\"), mdx(\"h2\", null, mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"useQueryLoader\"), \" / \", mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"loadQuery\"), \" \\uB97C \\uC0AC\\uC6A9\"), mdx(\"p\", null, \"useQueryLoader \\uD6C5\\uC744 \\uC0AC\\uC6A9\\uD574\\uC11C \\uCFFC\\uB9AC\\uB97C \\uC0C8\\uB85C\\uACE0\\uCE68\\uD558\\uAE30 \\uC704\\uD574\\uC11C\\uB294 loadQuery \\uD568\\uC218\\uB9CC \\uB2E4\\uC2DC \\uD638\\uCD9C\\uD558\\uBA74 \\uB41C\\uB2E4.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"/**\\n * App.react.js\\n */\\nimport type {AppQuery as AppQueryType} from 'AppQuery.graphql';\\n\\nconst AppQuery = require('__generated__/AppQuery.graphql');\\n\\nfunction App(props: Props) {\\n  const [queryRef, loadQuery] = useQueryLoader<AppQueryType>(\\n    AppQuery,\\n    props.appQueryRef /* initial query ref */\\n  );\\n\\n  const refresh = useCallback(() => {\\n    // Load the query again using the same original variables.\\n    // Calling loadQuery will update the value of queryRef.\\n    // The fetchPolicy ensures we always fetch from the server and skip\\n    // the local data cache.\\n    const {variables} = props.appQueryRef;\\n    loadQuery(variables, {fetchPolicy: 'network-only'});\\n  }, [/* ... */]);\\n\\n  return (\\n    <React.Suspense fallback=\\\"Loading query...\\\">\\n      <MainContent\\n        refresh={refresh}\\n        queryRef={queryRef}\\n      />\\n    </React.Suspense>\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"/**\\n * MainContent.react.js\\n */\\nimport type {AppQuery as AppQueryType} from 'AppQuery.graphql';\\n\\n// Renders the preloaded query, given the query reference\\nfunction MainContent(props) {\\n  const {refresh, queryRef} = props;\\n  const data = usePreloadedQuery<AppQueryType>(\\n    graphql`\\n      query AppQuery($id: ID!) {\\n        user(id: $id) {\\n          name\\n          friends {\\n            count\\n          }\\n        }\\n      }\\n    `,\\n    queryRef,\\n  );\\n\\n  return (\\n    <>\\n      <h1>{data.user?.name}</h1>\\n      <div>Friends count: {data.user.friends?.count}</div>\\n      <Button\\n        onClick={() => refresh()}>\\n        Fetch latest count\\n      </Button>\\n    </>\\n  );\\n}\\n\")), mdx(\"p\", null, \"\\uC704 \\uC608\\uC81C\\uB97C \\uC0B4\\uD3B4\\uBCF4\\uBA74,\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\uC6B0\\uB9AC\\uB294 loadQuery \\uD568\\uC218\\uB97C \\uC0C8\\uB85C\\uACE0\\uCE68\\uC744 \\uC704\\uD55C \\uC774\\uBCA4\\uD2B8 \\uD578\\uB4E4\\uB7EC \\uC548\\uC5D0\\uC11C \\uD638\\uCD9C\\uD558\\uAE30 \\uB54C\\uBB38\\uC5D0 \\uB124\\uD2B8\\uC6CC\\uD06C request \\uB294 \\uC989\\uC2DC \\uC2DC\\uC791\\uB418\\uACE0 \\uC5C5\\uB370\\uC774\\uD2B8\\uB41C queryRef\\uB97C usePreloaded\\uB97C \\uC0AC\\uC6A9\\uD558\\uB294 MainContent \\uCEF4\\uD3EC\\uB10C\\uD2B8\\uC5D0 \\uC804\\uB2EC\\uD569\\uB2C8\\uB2E4.- \\uC5C5\\uB370\\uC774\\uD2B8\\uB41C \\uB370\\uC774\\uD130\\uB97C \\uB80C\\uB354\\uB9C1\\uD569\\uB2C8\\uB2E4.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\uD56D\\uC0C1 \\uB124\\uD2B8\\uC6CC\\uD06C\\uC5D0\\uC11C \\uAC00\\uC838\\uC624\\uACE0 \\uB85C\\uCEEC \\uB370\\uC774\\uD130 \\uCE90\\uC2DC\\uB97C \\uAC74\\uB108\\uB6F0\\uB3C4\\uB85D \\uD558\\uAE30 \\uC704\\uD574 'network-only' \\uB77C\\uB294 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fetchPolicy\"), \"\\uB97C \\uC804\\uB2EC \\uD569\\uB2C8\\uB2E4.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"loadQuery \\uB97C \\uD638\\uCD9C\\uD558\\uB294 \\uAC83\\uC740 \\uCEF4\\uD3EC\\uB10C\\uD2B8\\uAC00 \\uB9AC\\uB80C\\uB354\\uB418\\uBA74\\uC11C \\uB80C\\uB354\\uB9C1\\uC744 \\uB9C9\\uB294 usePreloadedQuery \\uAC00 \\uBC1C\\uC0DD\\uD569\\uB2C8\\uB2E4. \\uC6B0\\uB9AC\\uB294 \\uB85C\\uB529\\uC0C1\\uD0DC\\uB97C \\uD45C\\uD604\\uD558\\uAE30 \\uC704\\uD574\\uC11C Suspense boundary\\uB85C MainContent \\uCEF4\\uD3EC\\uB10C\\uD2B8\\uAC00 \\uAC10\\uC2F8\\uC838\\uC788\\uB294\\uC9C0 \\uC0B4\\uD3B4\\uBD10\\uC57C\\uD569\\uB2C8\\uB2E4. \"))), mdx(\"h3\", null, \"\\uB9CC\\uC57D Suspense \\uB97C \\uD53C\\uD574\\uC57C\\uD55C\\uB2E4\\uBA74\"), mdx(\"p\", null, \"\\uACBD\\uC6B0\\uC5D0 \\uB530\\uB77C Suspense \\uC758 fallback \\uC744 \\uBCF4\\uC5EC\\uC8FC\\uC9C0 \\uC54A\\uACE0 \\uC2F6\\uC744 \\uB54C\\uAC00 \\uC788\\uC2B5\\uB2C8\\uB2E4. \\uC774\\uB7EC\\uD55C \\uACBD\\uC6B0\\uC5D0\\uB294 \\uB85C\\uB529\\uC0C1\\uD0DC\\uB97C \\uC218\\uB3D9\\uC73C\\uB85C \\uCD94\\uC801\\uD560\\uC218\\uC788\\uB294 fetchQuery  \\uB97C \\uB300\\uC2E0 \\uC0AC\\uC6A9\\uD560\\uC218 \\uC788\\uC2B5\\uB2C8\\uB2E4.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"\\uCC38\\uACE0\"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"\\uB3D9\\uC2DC \\uB80C\\uB354\\uB9C1\\uC774 \\uC9C0\\uC6D0\\uB418\\uB294 \\uC774\\uD6C4\\uC758 React \\uBC84\\uC804\\uC5D0\\uC11C\\uB294 \\uC774 \\uACBD\\uC6B0\\uC5D0 \\uB300\\uD574\\uC11C \\uC9C0\\uC6D0\\uD560 \\uAC83\\uC785\\uB2C8\\uB2E4  Suspending \\uC2DC\\uC5D0 \\uC774\\uBBF8 \\uB9AC\\uB80C\\uB354\\uB9C1\\uB41C \\uB0B4\\uC6A9\\uB4E4\\uC774 Suspense fallback \\uC73C\\uB85C \\uC228\\uACA8\\uC9C0\\uB294 \\uAC83\\uC744 \\uD53C\\uD558\\uB3C4\\uB85D \\uD574\\uC904 \\uAC83\\uC785\\uB2C8\\uB2E4.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"/**\\n * App.react.js\\n */\\nimport type {AppQuery as AppQueryType} from 'AppQuery.graphql';\\n\\nconst AppQuery = require('__generated__/AppQuery.graphql');\\n\\nfunction App(props: Props) {\\n  const environment = useRelayEnvironment();\\n  const [queryRef, loadQuery] = useQueryLoader<AppQueryType>(\\n    AppQuery,\\n    props.appQueryRef /* initial query ref */\\n  );\\n  const [isRefreshing, setIsRefreshing] = useState(false)\\n\\n  const refresh = useCallback(() => {\\n    if (isRefreshing) { return; }\\n    const {variables} = props.appQueryRef;\\n    setIsRefreshing(true);\\n\\n    // fetchQuery will fetch the query and write\\n    // the data to the Relay store. This will ensure\\n    // that when we re-render, the data is already\\n    // cached and we don't suspend\\n    fetchQuery(environment, AppQuery, variables)\\n      .subscribe({\\n        complete: () => {\\n          setIsRefreshing(false);\\n\\n          // *After* the query has been fetched, we call\\n          // loadQuery again to re-render with a new\\n          // queryRef.\\n          // At this point the data for the query should\\n          // be cached, so we use the 'store-only'\\n          // fetchPolicy to avoid suspending.\\n          loadQuery(variables, {fetchPolicy: 'store-only'});\\n        }\\n        error: () => {\\n          setIsRefreshing(false);\\n        }\\n      });\\n  }, [/* ... */]);\\n\\n  return (\\n    <React.Suspense fallback=\\\"Loading query...\\\">\\n      <MainContent\\n        isRefreshing={isRefreshing}\\n        refresh={refresh}\\n        queryRef={queryRef}\\n      />\\n    </React.Suspense>\\n  );\\n}\\n\")), mdx(\"p\", null, \"\\uC704 \\uC608\\uC81C\\uB97C \\uC0B4\\uD3B4\\uBCF4\\uBA74,\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC6B0\\uB9AC\\uAC00 \\uC0C8\\uB85C\\uACE0\\uCE68\\uD560\\uB54C, \\uC774\\uC81C\\uB294 \\uC6B0\\uB9AC\\uC758 isRefreshing \\uB85C\\uB529 \\uC0C1\\uD0DC\\uB97C \\uAC00\\uC9C0\\uACE0\\uC788\\uC2B5\\uB2C8\\uB2E4. \\uC6B0\\uB9AC\\uB294 \\uC774 \\uC0C1\\uD0DC\\uB97C \\uC0AC\\uC6A9\\uD574\\uC11C MainContent \\uAD6C\\uC131 \\uC694\\uC18C \\uB0B4\\uC5D0\\uC11C MainContent\\uB97C \\uC228\\uAE30\\uC9C0 \\uC54A\\uACE0 \\uC0AC\\uC6A9 \\uC911\\uC778 \\uC2A4\\uD53C\\uB108 \\uB610\\uB294 \\uC720\\uC0AC\\uD55C \\uB85C\\uB529 UI\\uB97C \\uB80C\\uB354\\uB9C1 \\uD560 \\uC218 \\uC788\\uC2B5\\uB2C8\\uB2E4.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC774\\uBCA4\\uD2B8 \\uD578\\uB4E4\\uB7EC\\uC5D0\\uC11C \\uBA3C\\uC800 fetchQuery\\uB97C \\uD638\\uCD9C\\uD558\\uC5EC \\uCFFC\\uB9AC\\uB97C \\uAC00\\uC838\\uC624\\uACE0 \\uB85C\\uCEEC \\uB9B4\\uB808\\uC774 \\uC800\\uC7A5\\uC18C\\uC5D0 \\uB370\\uC774\\uD130\\uB97C \\uC501\\uB2C8\\uB2E4. fetchQuery \\uB124\\uD2B8\\uC6CC\\uD06C \\uC694\\uCCAD\\uC774 \\uC644\\uB8CC\\uB418\\uBA74 loadQuery\\uB97C \\uD638\\uCD9C\\uD558\\uC5EC \\uC5C5\\uB370\\uC774\\uD2B8\\uB41C queryRef\\uB97C \\uC5BB\\uC740 \\uB2E4\\uC74C usePreloaded\\uB85C \\uC804\\uB2EC\\uD569\\uB2C8\\uB2E4.\\uCFFC\\uB9AC\\uB294 \\uC774\\uC804 \\uC608\\uC81C\\uC640 \\uB9C8\\uCC2C\\uAC00\\uC9C0\\uB85C \\uC5C5\\uB370\\uC774\\uD2B8\\uB41C \\uB370\\uC774\\uD130\\uB97C \\uB80C\\uB354\\uB9C1\\uD569\\uB2C8\\uB2E4.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC774\\uB54C loadQuery\\uAC00 \\uD638\\uCD9C\\uB418\\uBA74 \\uCFFC\\uB9AC\\uC5D0 \\uB300\\uD55C \\uB370\\uC774\\uD130\\uAC00 \\uB85C\\uCEEC \\uB9B4\\uB808\\uC774 \\uC800\\uC7A5\\uC18C\\uC5D0 \\uC774\\uBBF8 \\uCE90\\uC2DC\\uB418\\uC5B4 \\uC788\\uC5B4\\uC57C \\uD558\\uBBC0\\uB85C \\uC77C\\uC2DC \\uC911\\uB2E8\\uC744 \\uBC29\\uC9C0\\uD558\\uACE0 \\uC774\\uBBF8 \\uCE90\\uC2DC\\uB41C \\uB370\\uC774\\uD130\\uB9CC \\uC77D\\uAE30 \\uC704\\uD574 'store-only'\\uC758 fetchPolicy\\uB97C \\uC0AC\\uC6A9\\uD569\\uB2C8\\uB2E4.\")), mdx(\"h2\", null, mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"useLazyLoadQuery\"), \" \\uB97C \\uC0AC\\uC6A9\"), mdx(\"p\", null, \"useLazyLoadQuery Hook\\uC744 \\uC0AC\\uC6A9\\uD558\\uC5EC \\uCFFC\\uB9AC\\uB97C \\uC0C8\\uB85C \\uACE0\\uCE58\\uB824\\uBA74 \\uC544\\uB798\\uC640 \\uAC19\\uC774 \\uC218\\uD589\\uD560 \\uC218 \\uC788\\uC2B5\\uB2C8\\uB2E4.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"/**\\n * App.react.js\\n */\\nimport type {AppQuery as AppQueryType} from 'AppQuery.graphql';\\n\\nconst AppQuery = require('__generated__/AppQuery.graphql');\\n\\nfunction App(props: Props) {\\n  const variables = {id: '4'};\\n  const [refreshedQueryOptions, setRefreshedQueryOptions] = useState(null);\\n\\n  const refresh = useCallback(() => {\\n    // Trigger a re-render of useLazyLoadQuery with the same variables,\\n    // but an updated fetchKey and fetchPolicy.\\n    // The new fetchKey will ensure that the query is fully\\n    // re-evaluated and refetched.\\n    // The fetchPolicy ensures that we always fetch from the network\\n    // and skip the local data cache.\\n    setRefreshedQueryOptions(prev => ({\\n      fetchKey: (prev?.fetchKey ?? 0) + 1,\\n      fetchPolicy: 'network-only',\\n    }));\\n  }, [/* ... */]);\\n\\n  return (\\n    <React.Suspense fallback=\\\"Loading query...\\\">\\n      <MainContent\\n        refresh={refresh}\\n        queryOptions={refreshedQueryOptions ?? {}}\\n        variables={variables}\\n      />\\n    </React.Suspense>\\n  );\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"/**\\n * MainContent.react.js\\n */\\nimport type {AppQuery as AppQueryType} from 'AppQuery.graphql';\\n\\n// Fetches and renders the query, given the fetch options\\nfunction MainContent(props) {\\n  const {refresh, queryOptions, variables} = props;\\n  const data = useLazyLoadQuery<AppQueryType>(\\n    graphql`\\n      query AppQuery($id: ID!) {\\n        user(id: $id) {\\n          name\\n          friends {\\n            count\\n          }\\n        }\\n      }\\n    `,\\n    variables,\\n    queryOptions,\\n  );\\n\\n  return (\\n    <>\\n      <h1>{data.user?.name}</h1>\\n      <div>Friends count: {data.user.friends?.count}</div>\\n      <Button\\n        onClick={() => refresh()}>\\n        Fetch latest count\\n      </Button>\\n    </>\\n  );\\n}\\n\")), mdx(\"p\", null, \"\\uC704 \\uC608\\uC81C\\uB97C \\uC0B4\\uD3B4\\uBCF4\\uBA74,\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\uC0C1\\uD0DC\\uC5D0\\uC11C\\uC758 \\uC0C8 \\uC635\\uC158\\uC744 \\uC124\\uC815\\uD558\\uC5EC \\uC0C8\\uB85C \\uACE0\\uCE60 \\uC218 \\uC788\\uB3C4\\uB85D \\uC774\\uBCA4\\uD2B8 \\uD578\\uB4E4\\uB7EC\\uC758 \\uCEF4\\uD3EC\\uB10C\\uD2B8\\uB97C \\uC5C5\\uB370\\uC774\\uD2B8\\uD569\\uB2C8\\uB2E4. \\uC774\\uB807\\uAC8C \\uD558\\uBA74 useLazyLoadQuery\\uB97C \\uC0AC\\uC6A9\\uD558\\uB294 MainContent \\uCEF4\\uD3EC\\uB10C\\uD2B8\\uAC00 \\uC0C8 fetchKey \\uBC0F fetchPolicy\\uB85C \\uB2E4\\uC2DC \\uB80C\\uB354\\uB9C1\\uD558\\uACE0 \\uB80C\\uB354\\uB9C1 \\uC2DC \\uCFFC\\uB9AC\\uB97C \\uB2E4\\uC2DC \\uAC00\\uC838\\uC635\\uB2C8\\uB2E4.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\uC5C5\\uB370\\uC774\\uD2B8 \\uB9C8\\uB2E4 \\uC99D\\uAC00\\uD558\\uB294 fetchKey \\uC758 \\uC0C8\\uB85C\\uC6B4 \\uAC12\\uC744 \\uC804\\uB2EC\\uD569\\uB2C8\\uB2E4. \\uBAA8\\uB4E0 \\uC5C5\\uB370\\uC774\\uD2B8\\uC5D0\\uC11C LazyLoadQuery\\uB97C \\uC0AC\\uC6A9\\uD560 \\uC0C8 fetchKey\\uB97C \\uC804\\uB2EC\\uD558\\uBA74 \\uCFFC\\uB9AC\\uAC00 \\uC644\\uC804\\uD788 \\uC7AC\\uD3C9\\uAC00\\uB418\\uACE0 \\uB2E4\\uC2DC \\uD638\\uCD9C\\uB429\\uB2C8\\uB2E4.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\uD56D\\uC0C1 \\uB124\\uD2B8\\uC6CC\\uD06C\\uC5D0\\uC11C \\uB370\\uC774\\uD130\\uB97C \\uAC00\\uC838\\uC624\\uACE0 \\uB85C\\uCEEC\\uB370\\uC774\\uD130 \\uCE90\\uC2DC\\uB97C \\uAC74\\uB108 \\uB6F0\\uAE30 \\uC704\\uD574 'network-only' \\uC758 fetchPolicy \\uB97C \\uC0AC\\uC6A9\\uD569\\uB2C8\\uB2E4.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\uC0C8\\uB85C \\uACE0\\uCE68 \\uC2DC \\uC0C1\\uD0DC \\uC5C5\\uB370\\uC774\\uD2B8\\uB294 \\uC0AC\\uC6A9 \\uC911\\uC778 fetchPolicy\\uB85C \\uC778\\uD574 \\uD56D\\uC0C1 \\uB124\\uD2B8\\uC6CC\\uD06C \\uC694\\uCCAD\\uC774 \\uC774\\uB8E8\\uC5B4\\uC9C0\\uAE30 \\uB54C\\uBB38\\uC5D0 \\uCEF4\\uD3EC\\uB10C\\uD2B8\\uAC00 suspend \\uB429\\uB2C8\\uB2E4.  \\uB85C\\uB529\\uC0C1\\uD0DC\\uB97C \\uD45C\\uD604\\uD558\\uAE30 \\uC704\\uD574\\uC11C Suspense boundary\\uB85C MainContent \\uCEF4\\uD3EC\\uB10C\\uD2B8\\uAC00 \\uAC10\\uC2F8\\uC838\\uC788\\uB294\\uC9C0 \\uC0B4\\uD3B4\\uBD10\\uC57C\\uD569\\uB2C8\\uB2E4. \"))), mdx(\"h3\", null, \"\\uB9CC\\uC57D Suspense \\uB97C \\uD53C\\uD574\\uC57C\\uD55C\\uB2E4\\uBA74\"), mdx(\"p\", null, \"\\uACBD\\uC6B0\\uC5D0 \\uB530\\uB77C Suspense \\uC758 fallback \\uC744 \\uBCF4\\uC5EC\\uC8FC\\uC9C0 \\uC54A\\uACE0 \\uC2F6\\uC744 \\uB54C\\uAC00 \\uC788\\uC2B5\\uB2C8\\uB2E4. \\uC774\\uB7EC\\uD55C \\uACBD\\uC6B0\\uC5D0\\uB294 \\uB85C\\uB529\\uC0C1\\uD0DC\\uB97C \\uC218\\uB3D9\\uC73C\\uB85C \\uCD94\\uC801\\uD560\\uC218\\uC788\\uB294 fetchQuery  \\uB97C \\uB300\\uC2E0 \\uC0AC\\uC6A9\\uD560\\uC218 \\uC788\\uC2B5\\uB2C8\\uB2E4.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"\\uCC38\\uACE0\"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"\\uB3D9\\uC2DC \\uB80C\\uB354\\uB9C1\\uC774 \\uC9C0\\uC6D0\\uB418\\uB294 \\uC774\\uD6C4\\uC758 React \\uBC84\\uC804\\uC5D0\\uC11C\\uB294 \\uC774 \\uACBD\\uC6B0\\uC5D0 \\uB300\\uD574\\uC11C \\uC9C0\\uC6D0\\uD560 \\uAC83\\uC785\\uB2C8\\uB2E4  Suspending \\uC2DC\\uC5D0 \\uC774\\uBBF8 \\uB9AC\\uB80C\\uB354\\uB9C1\\uB41C \\uB0B4\\uC6A9\\uB4E4\\uC774 Suspense fallback \\uC73C\\uB85C \\uC228\\uACA8\\uC9C0\\uB294 \\uAC83\\uC744 \\uD53C\\uD558\\uB3C4\\uB85D \\uD574\\uC904 \\uAC83\\uC785\\uB2C8\\uB2E4.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"/**\\n * App.react.js\\n */\\nimport type {AppQuery as AppQueryType} from 'AppQuery.graphql';\\n\\nconst AppQuery = require('__generated__/AppQuery.graphql');\\n\\nfunction App(props: Props) {\\n  const variables = {id: '4'}\\n  const environment = useRelayEnvironment();\\n  const [refreshedQueryOptions, setRefreshedQueryOptions] = useState(null);\\n  const [isRefreshing, setIsRefreshing] = useState(false)\\n\\n  const refresh = useCallback(() => {\\n    if (isRefreshing) { return; }\\n    setIsRefreshing(true);\\n\\n    // fetchQuery will fetch the query and write\\n    // the data to the Relay store. This will ensure\\n    // that when we re-render, the data is already\\n    // cached and we don't suspend\\n    fetchQuery(environment, AppQuery, variables)\\n      .subscribe({\\n        complete: () => {\\n          setIsRefreshing(false);\\n\\n          // *After* the query has been fetched, we update\\n          // our state to re-render with the new fetchKey\\n          // and fetchPolicy.\\n          // At this point the data for the query should\\n          // be cached, so we use the 'store-only'\\n          // fetchPolicy to avoid suspending.\\n          setRefreshedQueryOptions(prev => ({\\n            fetchKey: (prev?.fetchKey ?? 0) + 1,\\n            fetchPolicy: 'store-only',\\n          }));\\n        }\\n        error: () => {\\n          setIsRefreshing(false);\\n        }\\n      });\\n  }, [/* ... */]);\\n\\n  return (\\n    <React.Suspense fallback=\\\"Loading query...\\\">\\n      <MainContent\\n        isRefreshing={isRefreshing}\\n        refresh={refresh}\\n        queryOptions={refreshedQueryOptions ?? {}}\\n        variables={variables}\\n      />\\n    </React.Suspense>\\n  );\\n}\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC6B0\\uB9AC\\uAC00 \\uC0C8\\uB85C\\uACE0\\uCE68\\uD560\\uB54C, \\uC774\\uC81C\\uB294 \\uC6B0\\uB9AC\\uC758 isRefreshing \\uB85C\\uB529 \\uC0C1\\uD0DC\\uB97C \\uAC00\\uC9C0\\uACE0\\uC788\\uC2B5\\uB2C8\\uB2E4. \\uC6B0\\uB9AC\\uB294 \\uC774 \\uC0C1\\uD0DC\\uB97C \\uC0AC\\uC6A9\\uD574\\uC11C MainContent \\uAD6C\\uC131 \\uC694\\uC18C \\uB0B4\\uC5D0\\uC11C MainContent\\uB97C \\uC228\\uAE30\\uC9C0 \\uC54A\\uACE0 \\uC0AC\\uC6A9 \\uC911\\uC778 \\uC2A4\\uD53C\\uB108 \\uB610\\uB294 \\uC720\\uC0AC\\uD55C \\uB85C\\uB529 UI\\uB97C \\uB80C\\uB354\\uB9C1 \\uD560 \\uC218 \\uC788\\uC2B5\\uB2C8\\uB2E4.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC774\\uBCA4\\uD2B8 \\uD578\\uB4E4\\uB7EC\\uC5D0\\uC11C \\uBA3C\\uC800 fetchQuery\\uB97C \\uD638\\uCD9C\\uD558\\uC5EC \\uCFFC\\uB9AC\\uB97C \\uAC00\\uC838\\uC624\\uACE0 \\uB85C\\uCEEC \\uB9B4\\uB808\\uC774 \\uC800\\uC7A5\\uC18C\\uC5D0 \\uB370\\uC774\\uD130\\uB97C \\uC501\\uB2C8\\uB2E4. fetchQuery \\uB124\\uD2B8\\uC6CC\\uD06C \\uC694\\uCCAD\\uC774 \\uC644\\uB8CC\\uB418\\uBA74 \\uC0C1\\uD0DC\\uB97C \\uC5C5\\uB370\\uC774\\uD2B8\\uD558\\uC5EC \\uC5C5\\uB370\\uC774\\uD2B8\\uB41C fetchKey\\uC640 fetchPolicy\\uB97C \\uB2E4\\uC2DC \\uB80C\\uB354\\uD55C \\uB2E4\\uC74C useLazyLoadQuery\\uB85C \\uC804\\uB2EC\\uD558\\uC5EC \\uC774\\uC804 \\uC608\\uC81C\\uC640 \\uB9C8\\uCC2C\\uAC00\\uC9C0\\uB85C \\uC5C5\\uB370\\uC774\\uD2B8\\uB41C \\uB370\\uC774\\uD130\\uB97C \\uB80C\\uB354\\uB9C1\\uD569\\uB2C8\\uB2E4.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC774 \\uC2DC\\uC810\\uC5D0\\uC11C \\uC0C1\\uD0DC\\uB97C \\uC5C5\\uB370\\uC774\\uD2B8\\uD560 \\uB54C \\uCFFC\\uB9AC\\uC5D0 \\uB300\\uD55C \\uB370\\uC774\\uD130\\uAC00 \\uB85C\\uCEEC \\uB9B4\\uB808\\uC774 \\uC800\\uC7A5\\uC18C\\uC5D0 \\uC774\\uBBF8 \\uCE90\\uC2DC\\uB418\\uC5B4\\uC57C \\uD558\\uBBC0\\uB85C \\uC77C\\uC2DC \\uC911\\uB2E8\\uC744 \\uD53C\\uD558\\uACE0 \\uC774\\uBBF8 \\uCE90\\uC2DC\\uB41C \\uB370\\uC774\\uD130\\uB9CC \\uC77D\\uAE30 \\uC704\\uD574 'store-only'\\uC758 fetchPolicy\\uB97C \\uC0AC\\uC6A9\\uD569\\uB2C8\\uB2E4.\")), mdx(\"h1\", null, \"Refetching Queries with Different Data\"), mdx(\"p\", null, \" \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"\\\"refetching a query\\\"\"), \" \\uB294 \\uB2E4\\uC2DC \\uADF8 \\uCFFC\\uB9AC\\uB85C \\uB2E4\\uB978 \\uB370\\uC774\\uD130\\uB97C \\uC694\\uCCAD \\uD558\\uB294 \\uAC83\\uC785\\uB2C8\\uB2E4. \\uC608\\uB97C \\uB4E4\\uC5B4, \\uD604\\uC7AC \\uC120\\uD0DD\\uD55C \\uD56D\\uBAA9\\uC744 \\uBCC0\\uACBD\\uD558\\uAC70\\uB098, \\uD45C\\uC2DC\\uB418\\uB294 \\uD56D\\uBAA9\\uACFC \\uB2E4\\uB978 \\uD56D\\uBAA9 \\uBAA9\\uB85D\\uC744 \\uB80C\\uB354\\uB9C1\\uD558\\uAC70\\uB098, \\uC77C\\uBC18\\uC801\\uC73C\\uB85C \\uD604\\uC7AC \\uB80C\\uB354\\uB9C1\\uB41C \\uB0B4\\uC6A9\\uC744 \\uC0C8 \\uB0B4\\uC6A9\\uC774\\uB098 \\uB2E4\\uB978 \\uB0B4\\uC6A9\\uC73C\\uB85C \\uBCC0\\uD658\\uD558\\uAE30 \\uC704\\uD55C \\uAC83\\uC77C \\uC218 \\uC788\\uC2B5\\uB2C8\\uB2E4.\"), mdx(\"h2\", null, mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"useQueryLoader\"), \" / \", mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"loadQuery\"), \" \\uC0AC\\uC6A9\"), mdx(\"p\", null, \"Refreshing Queries with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useQueryLoader\"), \" \\uC640 \\uC720\\uC0AC\\uD55C \\uBC29\\uBC95\\uC73C\\uB85C refetch \\uB97C \\uD560 \\uC218 \\uC788\\uC2B5\\uB2C8\\uB2E4.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"/**\\n * App.react.js\\n */\\nconst AppQuery = require('__generated__/AppQuery.graphql');\\n\\nfunction App(props: Props) {\\n  const variables = {id: '4'};\\n  const [queryRef, loadQuery] = useQueryLoader<AppQueryType>(\\n    AppQuery,\\n    props.appQueryRef /* initial query ref */\\n  );\\n\\n  const refetch = useCallback(() => {\\n    // Load the query again using the same original variables.\\n    // Calling loadQuery will update the value of queryRef.\\n    loadQuery({id: 'different-id'});\\n  }, [/* ... */]);\\n\\n  return (\\n    <React.Suspense fallback=\\\"Loading query...\\\">\\n      <MainContent\\n        refetch={refetch}\\n        queryRef={queryRef}\\n      />\\n    </React.Suspense>\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"/**\\n * MainContent.react.js\\n */\\nimport type {AppQuery as AppQueryType} from 'AppQuery.graphql';\\n\\n// Renders the preloaded query, given the query reference\\nfunction MainContent(props) {\\n  const {refetch, queryRef} = props;\\n  const data = usePreloadedQuery<AppQueryType>(\\n    graphql`\\n      query AppQuery($id: ID!) {\\n        user(id: $id) {\\n          name\\n          friends {\\n            count\\n          }\\n        }\\n      }\\n    `,\\n    queryRef,\\n  );\\n\\n  return (\\n    <>\\n      <h1>{data.user?.name}</h1>\\n      <div>Friends count: {data.user?.friends?.count}</div>\\n      <Button\\n        onClick={() => refetch()}>\\n        Fetch latest count\\n      </Button>\\n    </>\\n  );\\n}\\n\")), mdx(\"p\", null, \"\\uC704 \\uC608\\uC81C\\uB97C \\uC0B4\\uD3B4\\uBCF4\\uBA74,\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\uC6B0\\uB9AC\\uB294 loadQuery \\uD568\\uC218\\uB97C \\uC0C8\\uB85C\\uACE0\\uCE68\\uC744 \\uC704\\uD55C \\uC774\\uBCA4\\uD2B8 \\uD578\\uB4E4\\uB7EC \\uC548\\uC5D0\\uC11C \\uD638\\uCD9C\\uD558\\uAE30 \\uB54C\\uBB38\\uC5D0 \\uB124\\uD2B8\\uC6CC\\uD06C request \\uB294 \\uC989\\uC2DC \\uC2DC\\uC791\\uB418\\uACE0 \\uC5C5\\uB370\\uC774\\uD2B8\\uB41C queryRef\\uB97C usePreloaded\\uB97C \\uC0AC\\uC6A9\\uD558\\uB294 MainContent \\uCEF4\\uD3EC\\uB10C\\uD2B8\\uC5D0 \\uC804\\uB2EC\\uD569\\uB2C8\\uB2E4.- \\uC5C5\\uB370\\uC774\\uD2B8\\uB41C \\uB370\\uC774\\uD130\\uB97C \\uB80C\\uB354\\uB9C1\\uD569\\uB2C8\\uB2E4.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"loadQuery\\uC5D0 fetchPolicy\\uB97C \\uC804\\uB2EC\\uD558\\uC9C0 \\uC54A\\uACE0 \\uC788\\uC2B5\\uB2C8\\uB2E4. \\uC989, 'store-or-network'\\uC758 \\uAE30\\uBCF8\\uAC12\\uC744 \\uC0AC\\uC6A9\\uD569\\uB2C8\\uB2E4. \\uB85C\\uCEEC \\uCE90\\uC2DC \\uB370\\uC774\\uD130\\uB97C \\uC0AC\\uC6A9\\uD560\\uC9C0 \\uC5EC\\uBD80\\uB97C \\uC9C0\\uC815\\uD558\\uAE30 \\uC704\\uD574 \\uB2E4\\uB978 \\uC815\\uCC45\\uC744 \\uC81C\\uACF5\\uD560 \\uC218 \\uC788\\uC2B5\\uB2C8\\uB2E4.\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"store-or-network : \\uB370\\uC774\\uD130\\uAC00 \\uB9B4\\uB808\\uC774 \\uC800\\uC7A5\\uC18C\\uC5D0 \\uCE90\\uC2DC\\uB418\\uC5B4\\uC788\\uB294\\uC9C0 \\uC5C6\\uB294\\uC9C0 \\uD655\\uC778 \\uD6C4 \\uC874\\uC7AC\\uD558\\uC9C0 \\uC54A\\uB294\\uB2E4\\uBA74 \\uB124\\uD2B8\\uC6CC\\uD06C \\uC694\\uCCAD\\uC744 \\uBCF4\\uB0B4\\uB294 fetch Policy\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\uB124\\uD2B8\\uC6CC\\uD06C \\uC694\\uCCAD\\uC744 \\uBCF4\\uB0BC \\uC218\\uB3C4 \\uC788\\uAE30 \\uB54C\\uBB38\\uC5D0 loadQuery \\uB97C \\uD638\\uCD9C\\uD558\\uB294 \\uAC83\\uC740  \\uB80C\\uB354\\uB9C1\\uC744 \\uB9C9\\uB294 usePreloadedQuery \\uAC00 \\uBC1C\\uC0DD\\uD560 \\uC218\\uB3C4 \\uC788\\uC2B5\\uB2C8\\uB2E4. \\uC6B0\\uB9AC\\uB294 \\uB85C\\uB529\\uC0C1\\uD0DC\\uB97C \\uD45C\\uD604\\uD558\\uAE30 \\uC704\\uD574\\uC11C Suspense boundary\\uB85C MainContent \\uCEF4\\uD3EC\\uB10C\\uD2B8\\uAC00 \\uAC10\\uC2F8\\uC838\\uC788\\uB294\\uC9C0 \\uC0B4\\uD3B4\\uBD10\\uC57C\\uD569\\uB2C8\\uB2E4. \"))), mdx(\"h3\", null, \"\\uB9CC\\uC57D Suspense \\uB97C \\uD53C\\uD574\\uC57C\\uD55C\\uB2E4\\uBA74\"), mdx(\"p\", null, \"\\uACBD\\uC6B0\\uC5D0 \\uB530\\uB77C Suspense \\uC758 fallback \\uC744 \\uBCF4\\uC5EC\\uC8FC\\uC9C0 \\uC54A\\uACE0 \\uC2F6\\uC744 \\uB54C\\uAC00 \\uC788\\uC2B5\\uB2C8\\uB2E4. \\uC774\\uB7EC\\uD55C \\uACBD\\uC6B0\\uC5D0\\uB294 \\uB85C\\uB529\\uC0C1\\uD0DC\\uB97C \\uC218\\uB3D9\\uC73C\\uB85C \\uCD94\\uC801\\uD560\\uC218\\uC788\\uB294 fetchQuery  \\uB97C \\uB300\\uC2E0 \\uC0AC\\uC6A9\\uD560\\uC218 \\uC788\\uC2B5\\uB2C8\\uB2E4.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"\\uCC38\\uACE0\"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"\\uB3D9\\uC2DC \\uB80C\\uB354\\uB9C1\\uC774 \\uC9C0\\uC6D0\\uB418\\uB294 \\uC774\\uD6C4\\uC758 React \\uBC84\\uC804\\uC5D0\\uC11C\\uB294 \\uC774 \\uACBD\\uC6B0\\uC5D0 \\uB300\\uD574\\uC11C \\uC9C0\\uC6D0\\uD560 \\uAC83\\uC785\\uB2C8\\uB2E4  Suspending \\uC2DC\\uC5D0 \\uC774\\uBBF8 \\uB9AC\\uB80C\\uB354\\uB9C1\\uB41C \\uB0B4\\uC6A9\\uB4E4\\uC774 Suspense fallback \\uC73C\\uB85C \\uC228\\uACA8\\uC9C0\\uB294 \\uAC83\\uC744 \\uD53C\\uD558\\uB3C4\\uB85D \\uD574\\uC904 \\uAC83\\uC785\\uB2C8\\uB2E4.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"/**\\n * App.react.js\\n */\\nimport type {AppQuery as AppQueryType} from 'AppQuery.graphql';\\n\\nconst AppQuery = require('__generated__/AppQuery.graphql');\\n\\nfunction App(props: Props) {\\n  const environment = useRelayEnvironment();\\n  const [queryRef, loadQuery] = useQueryLoader<AppQueryType>(\\n    AppQuery,\\n    props.appQueryRef /* initial query ref */\\n  );\\n  const [isRefetching, setIsRefetching] = useState(false)\\n\\n  const refetch = useCallback(() => {\\n    if (isRefetching) { return; }\\n    setIsRefetching(true);\\n\\n    // fetchQuery will fetch the query and write\\n    // the data to the Relay store. This will ensure\\n    // that when we re-render, the data is already\\n    // cached and we don't suspend\\n    fetchQuery(environment, AppQuery, variables)\\n      .subscribe({\\n        complete: () => {\\n          setIsRefetching(false);\\n\\n          // *After* the query has been fetched, we call\\n          // loadQuery again to re-render with a new\\n          // queryRef.\\n          // At this point the data for the query should\\n          // be cached, so we use the 'store-only'\\n          // fetchPolicy to avoid suspending.\\n          loadQuery({id: 'different-id'}, {fetchPolicy: 'store-only'});\\n        }\\n        error: () => {\\n          setIsRefetching(false);\\n        }\\n      });\\n  }, [/* ... */]);\\n\\n  return (\\n    <React.Suspense fallback=\\\"Loading query...\\\">\\n      <MainContent\\n        isRefetching={isRefetching}\\n        refetch={refetch}\\n        queryRef={queryRef}\\n      />\\n    </React.Suspense>\\n  );\\n}\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC6B0\\uB9AC\\uAC00 \\uC0C8\\uB85C\\uACE0\\uCE68\\uD560\\uB54C, \\uC774\\uC81C\\uB294 \\uC6B0\\uB9AC\\uC758 isRefreshing \\uB85C\\uB529 \\uC0C1\\uD0DC\\uB97C \\uAC00\\uC9C0\\uACE0\\uC788\\uC2B5\\uB2C8\\uB2E4. \\uC6B0\\uB9AC\\uB294 \\uC774 \\uC0C1\\uD0DC\\uB97C \\uC0AC\\uC6A9\\uD574\\uC11C MainContent \\uAD6C\\uC131 \\uC694\\uC18C \\uB0B4\\uC5D0\\uC11C MainContent\\uB97C \\uC228\\uAE30\\uC9C0 \\uC54A\\uACE0 \\uC0AC\\uC6A9 \\uC911\\uC778 \\uC2A4\\uD53C\\uB108 \\uB610\\uB294 \\uC720\\uC0AC\\uD55C \\uB85C\\uB529 UI\\uB97C \\uB80C\\uB354\\uB9C1 \\uD560 \\uC218 \\uC788\\uC2B5\\uB2C8\\uB2E4.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC774\\uBCA4\\uD2B8 \\uD578\\uB4E4\\uB7EC\\uC5D0\\uC11C \\uBA3C\\uC800 fetchQuery\\uB97C \\uD638\\uCD9C\\uD558\\uC5EC \\uCFFC\\uB9AC\\uB97C \\uAC00\\uC838\\uC624\\uACE0 \\uB85C\\uCEEC \\uB9B4\\uB808\\uC774 \\uC800\\uC7A5\\uC18C\\uC5D0 \\uB370\\uC774\\uD130\\uB97C \\uC501\\uB2C8\\uB2E4. fetchQuery \\uB124\\uD2B8\\uC6CC\\uD06C \\uC694\\uCCAD\\uC774 \\uC644\\uB8CC\\uB418\\uBA74 loadQuery\\uB97C \\uD638\\uCD9C\\uD558\\uC5EC \\uC5C5\\uB370\\uC774\\uD2B8\\uB41C queryRef\\uB97C \\uC5BB\\uC740 \\uB2E4\\uC74C usePreloaded\\uB85C \\uC804\\uB2EC\\uD569\\uB2C8\\uB2E4.\\uCFFC\\uB9AC\\uB294 \\uC774\\uC804 \\uC608\\uC81C\\uC640 \\uB9C8\\uCC2C\\uAC00\\uC9C0\\uB85C \\uC5C5\\uB370\\uC774\\uD2B8\\uB41C \\uB370\\uC774\\uD130\\uB97C \\uB80C\\uB354\\uB9C1\\uD569\\uB2C8\\uB2E4.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC774\\uB54C loadQuery\\uAC00 \\uD638\\uCD9C\\uB418\\uBA74 \\uCFFC\\uB9AC\\uC5D0 \\uB300\\uD55C \\uB370\\uC774\\uD130\\uAC00 \\uB85C\\uCEEC \\uB9B4\\uB808\\uC774 \\uC800\\uC7A5\\uC18C\\uC5D0 \\uC774\\uBBF8 \\uCE90\\uC2DC\\uB418\\uC5B4 \\uC788\\uC5B4\\uC57C \\uD558\\uBBC0\\uB85C \\uC77C\\uC2DC \\uC911\\uB2E8\\uC744 \\uBC29\\uC9C0\\uD558\\uACE0 \\uC774\\uBBF8 \\uCE90\\uC2DC\\uB41C \\uB370\\uC774\\uD130\\uB9CC \\uC77D\\uAE30 \\uC704\\uD574 'store-only'\\uC758 fetchPolicy\\uB97C \\uC0AC\\uC6A9\\uD569\\uB2C8\\uB2E4.\")), mdx(\"h2\", null, mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"useLazyLoadQuery\"), \" \\uC0AC\\uC6A9\"), mdx(\"p\", null, \"Refreshing Queries with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useLazyLoadQuery\"), \" \\uC640 \\uC720\\uC0AC\\uD55C \\uBC29\\uBC95\\uC73C\\uB85C refetch \\uB97C \\uD560 \\uC218 \\uC788\\uC2B5\\uB2C8\\uB2E4.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"/**\\n * App.react.js\\n */\\nimport type {AppQuery as AppQueryType} from 'AppQuery.graphql';\\n\\nconst AppQuery = require('__generated__/AppQuery.graphql');\\n\\nfunction App(props: Props) {\\n  const [queryArgs, setQueryArgs] = useState({\\n    options: {fetchKey: 0},\\n    variables: {id: '4'},\\n  });\\n\\n  const refetch = useCallback(() => {\\n    // Trigger a re-render of useLazyLoadQuery with new variables,\\n    // *and* an updated fetchKey.\\n    // The new fetchKey will ensure that the query is fully\\n    // re-evaluated and refetched.\\n    setQueryArgs(prev => ({\\n      options: {\\n        fetchKey: (prev?.options.fetchKey ?? 0) + 1,\\n      },\\n      variables: {id: 'different-id'}\\n    }));\\n  }, [/* ... */]);\\n\\n  return (\\n    <React.Suspense fallback=\\\"Loading query...\\\">\\n      <MainContent\\n        refetch={refetch}\\n        queryArgs={queryArgs}\\n      />\\n    </React.Suspense>\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"/**\\n * MainContent.react.js\\n */\\nimport type {AppQuery as AppQueryType} from 'AppQuery.graphql';\\n\\n// Fetches and renders the query, given the fetch options\\nfunction MainContent(props) {\\n  const {refetch, queryArgs} = props;\\n  const data = useLazyLoadQuery<AppQueryType>(\\n    graphql`\\n      query AppQuery($id: ID!) {\\n        user(id: $id) {\\n          name\\n          friends {\\n            count\\n          }\\n        }\\n      }\\n    `,\\n    queryArgs.variables,\\n    queryArgs.options,\\n  );\\n\\n  return (\\n    <>\\n      <h1>{data.user?.name}</h1>\\n      <div>Friends count: {data.user.friends?.count}</div>\\n      <Button\\n        onClick={() => refetch()}>\\n        Fetch latest count\\n      </Button>\\n    </>\\n  );\\n}\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\uC0C1\\uD0DC\\uC5D0\\uC11C\\uC758 \\uC0C8 \\uC635\\uC158\\uC744 \\uC124\\uC815\\uD558\\uC5EC \\uC0C8\\uB85C \\uACE0\\uCE60 \\uC218 \\uC788\\uB3C4\\uB85D \\uC774\\uBCA4\\uD2B8 \\uD578\\uB4E4\\uB7EC\\uC758 \\uCEF4\\uD3EC\\uB10C\\uD2B8\\uB97C \\uC5C5\\uB370\\uC774\\uD2B8\\uD569\\uB2C8\\uB2E4. \\uC774\\uB807\\uAC8C \\uD558\\uBA74 useLazyLoadQuery\\uB97C \\uC0AC\\uC6A9\\uD558\\uB294 MainContent \\uCEF4\\uD3EC\\uB10C\\uD2B8\\uAC00  \\uC0C8 \\uBCC0\\uC218\\uC640 fetchKey\\uB85C \\uB2E4\\uC2DC \\uB80C\\uB354\\uB97C \\uC218\\uD589\\uD558\\uACE0 \\uB80C\\uB354\\uB9C1 \\uC2DC \\uCFFC\\uB9AC\\uB97C \\uB2E4\\uC2DC \\uAC00\\uC838\\uC635\\uB2C8\\uB2E4.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\uC5C5\\uB370\\uC774\\uD2B8 \\uB9C8\\uB2E4 \\uC99D\\uAC00\\uD558\\uB294 fetchKey \\uC758 \\uC0C8\\uB85C\\uC6B4 \\uAC12\\uC744 \\uC804\\uB2EC\\uD569\\uB2C8\\uB2E4. \\uBAA8\\uB4E0 \\uC5C5\\uB370\\uC774\\uD2B8\\uC5D0\\uC11C LazyLoadQuery\\uB97C \\uC0AC\\uC6A9\\uD560 \\uC0C8 fetchKey\\uB97C \\uC804\\uB2EC\\uD558\\uBA74 \\uCFFC\\uB9AC\\uAC00 \\uC644\\uC804\\uD788 \\uC7AC\\uD3C9\\uAC00\\uB418\\uACE0 \\uB2E4\\uC2DC \\uD638\\uCD9C\\uB429\\uB2C8\\uB2E4.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"LazyLoadQuery\\uB97C \\uC0AC\\uC6A9\\uD560  fetchPolicy\\uB97C \\uC804\\uB2EC\\uD558\\uC9C0 \\uC54A\\uC2B5\\uB2C8\\uB2E4. \\uC989, 'store-or-network'\\uC758 \\uAE30\\uBCF8\\uAC12\\uC744 \\uC0AC\\uC6A9\\uD569\\uB2C8\\uB2E4.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\uC0C8\\uB85C \\uACE0\\uCE68 \\uC2DC \\uC0C1\\uD0DC \\uC5C5\\uB370\\uC774\\uD2B8\\uB294 \\uC0AC\\uC6A9 \\uC911\\uC778 fetchPolicy\\uB85C \\uC778\\uD574 \\uD56D\\uC0C1 \\uB124\\uD2B8\\uC6CC\\uD06C \\uC694\\uCCAD\\uC774 \\uC774\\uB8E8\\uC5B4\\uC9C0\\uAE30 \\uB54C\\uBB38\\uC5D0 \\uCEF4\\uD3EC\\uB10C\\uD2B8\\uAC00 suspend \\uB429\\uB2C8\\uB2E4.  \\uB85C\\uB529\\uC0C1\\uD0DC\\uB97C \\uD45C\\uD604\\uD558\\uAE30 \\uC704\\uD574\\uC11C Suspense boundary\\uB85C MainContent \\uCEF4\\uD3EC\\uB10C\\uD2B8\\uAC00 \\uAC10\\uC2F8\\uC838\\uC788\\uB294\\uC9C0 \\uC0B4\\uD3B4\\uBD10\\uC57C\\uD569\\uB2C8\\uB2E4. \"))), mdx(\"h3\", null, \"\\uB9CC\\uC57D Suspense \\uB97C \\uD53C\\uD574\\uC57C\\uD55C\\uB2E4\\uBA74\"), mdx(\"p\", null, \"\\uACBD\\uC6B0\\uC5D0 \\uB530\\uB77C Suspense \\uC758 fallback \\uC744 \\uBCF4\\uC5EC\\uC8FC\\uC9C0 \\uC54A\\uACE0 \\uC2F6\\uC744 \\uB54C\\uAC00 \\uC788\\uC2B5\\uB2C8\\uB2E4. \\uC774\\uB7EC\\uD55C \\uACBD\\uC6B0\\uC5D0\\uB294 \\uB85C\\uB529\\uC0C1\\uD0DC\\uB97C \\uC218\\uB3D9\\uC73C\\uB85C \\uCD94\\uC801\\uD560\\uC218\\uC788\\uB294 fetchQuery  \\uB97C \\uB300\\uC2E0 \\uC0AC\\uC6A9\\uD560\\uC218 \\uC788\\uC2B5\\uB2C8\\uB2E4.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"\\uCC38\\uACE0\"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"\\uB3D9\\uC2DC \\uB80C\\uB354\\uB9C1\\uC774 \\uC9C0\\uC6D0\\uB418\\uB294 \\uC774\\uD6C4\\uC758 React \\uBC84\\uC804\\uC5D0\\uC11C\\uB294 \\uC774 \\uACBD\\uC6B0\\uC5D0 \\uB300\\uD574\\uC11C \\uC9C0\\uC6D0\\uD560 \\uAC83\\uC785\\uB2C8\\uB2E4  Suspending \\uC2DC\\uC5D0 \\uC774\\uBBF8 \\uB9AC\\uB80C\\uB354\\uB9C1\\uB41C \\uB0B4\\uC6A9\\uB4E4\\uC774 Suspense fallback \\uC73C\\uB85C \\uC228\\uACA8\\uC9C0\\uB294 \\uAC83\\uC744 \\uD53C\\uD558\\uB3C4\\uB85D \\uD574\\uC904 \\uAC83\\uC785\\uB2C8\\uB2E4.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"/**\\n * App.react.js\\n */\\nimport type {AppQuery as AppQueryType} from 'AppQuery.graphql';\\n\\nconst AppQuery = require('__generated__/AppQuery.graphql');\\n\\nfunction App(props: Props) {\\n  const environment = useRelayEnvironment();\\n  const [isRefreshing, setIsRefreshing] = useState(false)\\n  const [queryArgs, setQueryArgs] = useState({\\n    options: {fetchKey: 0, fetchPolicy: 'store-or-network'},\\n    variables: {id: '4'},\\n  });\\n\\n  const refetch = useCallback(() => {\\n    if (isRefreshing) { return; }\\n    setIsRefreshing(true);\\n\\n    // fetchQuery will fetch the query and write\\n    // the data to the Relay store. This will ensure\\n    // that when we re-render, the data is already\\n    // cached and we don't suspend\\n    fetchQuery(environment, AppQuery, variables)\\n      .subscribe({\\n        complete: () => {\\n          setIsRefreshing(false);\\n\\n          // *After* the query has been fetched, we update\\n          // our state to re-render with the new fetchKey\\n          // and fetchPolicy.\\n          // At this point the data for the query should\\n          // be cached, so we use the 'store-only'\\n          // fetchPolicy to avoid suspending.\\n          setQueryArgs(prev => ({\\n            options: {\\n              fetchKey: (prev?.options.fetchKey ?? 0) + 1,\\n              fetchPolicy: 'store-only',\\n            },\\n            variables: {id: 'different-id'}\\n          }));\\n        },\\n        error: () => {\\n          setIsRefreshing(false);\\n        }\\n      });\\n  }, [/* ... */]);\\n\\n  return (\\n    <React.Suspense fallback=\\\"Loading query...\\\">\\n      <MainContent\\n        isRefetching={isRefetching}\\n        refetch={refetch}\\n        queryArgs={queryArgs}\\n      />\\n    </React.Suspense>\\n  );\\n}\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC6B0\\uB9AC\\uAC00 \\uC0C8\\uB85C\\uACE0\\uCE68\\uD560\\uB54C, \\uC774\\uC81C\\uB294 \\uC6B0\\uB9AC\\uC758 isRefreshing \\uB85C\\uB529 \\uC0C1\\uD0DC\\uB97C \\uAC00\\uC9C0\\uACE0\\uC788\\uC2B5\\uB2C8\\uB2E4. \\uC6B0\\uB9AC\\uB294 \\uC774 \\uC0C1\\uD0DC\\uB97C \\uC0AC\\uC6A9\\uD574\\uC11C MainContent \\uAD6C\\uC131 \\uC694\\uC18C \\uB0B4\\uC5D0\\uC11C MainContent\\uB97C \\uC228\\uAE30\\uC9C0 \\uC54A\\uACE0 \\uC0AC\\uC6A9 \\uC911\\uC778 \\uC2A4\\uD53C\\uB108 \\uB610\\uB294 \\uC720\\uC0AC\\uD55C \\uB85C\\uB529 UI\\uB97C \\uB80C\\uB354\\uB9C1 \\uD560 \\uC218 \\uC788\\uC2B5\\uB2C8\\uB2E4.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC774\\uBCA4\\uD2B8 \\uD578\\uB4E4\\uB7EC\\uC5D0\\uC11C \\uBA3C\\uC800 fetchQuery\\uB97C \\uD638\\uCD9C\\uD558\\uC5EC \\uCFFC\\uB9AC\\uB97C \\uAC00\\uC838\\uC624\\uACE0 \\uB85C\\uCEEC \\uB9B4\\uB808\\uC774 \\uC800\\uC7A5\\uC18C\\uC5D0 \\uB370\\uC774\\uD130\\uB97C \\uC501\\uB2C8\\uB2E4. fetchQuery \\uB124\\uD2B8\\uC6CC\\uD06C \\uC694\\uCCAD\\uC774 \\uC644\\uB8CC\\uB418\\uBA74 \\uC0C1\\uD0DC\\uB97C \\uC5C5\\uB370\\uC774\\uD2B8\\uD558\\uC5EC \\uC5C5\\uB370\\uC774\\uD2B8\\uB41C fetchKey\\uC640 fetchPolicy\\uB97C \\uB2E4\\uC2DC \\uB80C\\uB354\\uD55C \\uB2E4\\uC74C useLazyLoadQuery\\uB85C \\uC804\\uB2EC\\uD558\\uC5EC \\uC774\\uC804 \\uC608\\uC81C\\uC640 \\uB9C8\\uCC2C\\uAC00\\uC9C0\\uB85C \\uC5C5\\uB370\\uC774\\uD2B8\\uB41C \\uB370\\uC774\\uD130\\uB97C \\uB80C\\uB354\\uB9C1\\uD569\\uB2C8\\uB2E4.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC774 \\uC2DC\\uC810\\uC5D0\\uC11C \\uC0C1\\uD0DC\\uB97C \\uC5C5\\uB370\\uC774\\uD2B8\\uD560 \\uB54C \\uCFFC\\uB9AC\\uC5D0 \\uB300\\uD55C \\uB370\\uC774\\uD130\\uAC00 \\uB85C\\uCEEC \\uB9B4\\uB808\\uC774 \\uC800\\uC7A5\\uC18C\\uC5D0 \\uC774\\uBBF8 \\uCE90\\uC2DC\\uB418\\uC5B4\\uC57C \\uD558\\uBBC0\\uB85C \\uC77C\\uC2DC \\uC911\\uB2E8\\uC744 \\uD53C\\uD558\\uACE0 \\uC774\\uBBF8 \\uCE90\\uC2DC\\uB41C \\uB370\\uC774\\uD130\\uB9CC \\uC77D\\uAE30 \\uC704\\uD574 'store-only'\\uC758 fetchPolicy\\uB97C \\uC0AC\\uC6A9\\uD569\\uB2C8\\uB2E4.\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#refreshing-queries","title":"Refreshing Queries","items":[{"url":"#real-time-features실시간-기능들-이용하기","title":"real-time features(실시간 기능들) 이용하기"},{"url":"#usequeryloader--loadquery-를-사용","title":"useQueryLoader / loadQuery 를 사용","items":[{"url":"#만약-suspense-를-피해야한다면","title":"만약 Suspense 를 피해야한다면"}]},{"url":"#uselazyloadquery-를-사용","title":"useLazyLoadQuery 를 사용","items":[{"url":"#만약-suspense-를-피해야한다면-1","title":"만약 Suspense 를 피해야한다면"}]}]},{"url":"#refetching-queries-with-different-data","title":"Refetching Queries with Different Data","items":[{"url":"#usequeryloader--loadquery-사용","title":"useQueryLoader / loadQuery 사용","items":[{"url":"#만약-suspense-를-피해야한다면-2","title":"만약 Suspense 를 피해야한다면"}]},{"url":"#uselazyloadquery-사용","title":"useLazyLoadQuery 사용","items":[{"url":"#만약-suspense-를-피해야한다면-3","title":"만약 Suspense 를 피해야한다면"}]}]}]},"parent":{"relativePath":"a-guided-tour/Refreshing and Refetching (part 1).md"},"frontmatter":{"metaTitle":null,"metaDescription":null}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/a-guided-tour/rendering-data-basics","title":"Rendering Data Basics"}}},{"node":{"fields":{"slug":"/getting-started","title":"Getting Started"}}},{"node":{"fields":{"slug":"/principles-and-architecture","title":"Principles And Architecture"}}},{"node":{"fields":{"slug":"/a-guided-tour","title":"A Guided Tour"}}},{"node":{"fields":{"slug":"/a-guided-tour/Refreshing and Refetching (part 1)","title":"Refreshing And Refetching Part 1"}}},{"node":{"fields":{"slug":"/a-guided-tour/Refreshing and Refetching (part 2)","title":"Refreshing And Refetching Part 2"}}},{"node":{"fields":{"slug":"/a-guided-tour/Rendering List Data and Pagination (part 2)","title":"Rendering List Data And Pagination Part 2"}}},{"node":{"fields":{"slug":"/a-guided-tour/Reuse Cached Data For Rendering","title":"Reuse Cached Data For Rendering"}}},{"node":{"fields":{"slug":"/a-guided-tour/Reusing Cached Data for Rendering (part 2)","title":"Reusing Cached Data For Rendering Part 2"}}},{"node":{"fields":{"slug":"/a-guided-tour/managing-data-outside-react","title":"Managing Data Outside React"}}},{"node":{"fields":{"slug":"/a-guided-tour/rendering-data-basics/Queries","title":"Queries"}}},{"node":{"fields":{"slug":"/a-guided-tour/rendering-data-basics/Fragments","title":"Fragments"}}},{"node":{"fields":{"slug":"/a-guided-tour/rendering-data-basics/Variables","title":"Variables"}}},{"node":{"fields":{"slug":"/a-guided-tour/Updating Data","title":"Updating Data"}}},{"node":{"fields":{"slug":"/a-guided-tour/rendering-data-basics/loading-state-with-suspense","title":"Loading State With Suspense"}}},{"node":{"fields":{"slug":"/a-guided-tour/rendering-data-basics/error-states-with-error-boundaries","title":"Error States With Error Boundaries"}}},{"node":{"fields":{"slug":"/a-guided-tour/rendering-data-basics/relay-environment","title":"Relay Environment"}}},{"node":{"fields":{"slug":"/getting-started/Step-by-step Guide","title":"Step By Step Guide"}}},{"node":{"fields":{"slug":"/","title":"Relay"}}},{"node":{"fields":{"slug":"/getting-started/Introduction","title":"Introduction"}}},{"node":{"fields":{"slug":"/principles-and-architecture/Thinking in Relay","title":"Thinking In Relay"}}},{"node":{"fields":{"slug":"/principles-and-architecture/Thinking in GraphQL","title":"Thinking In Graph QL"}}}]}},"pageContext":{"id":"9f77ab09-5960-5bdf-b583-44005b0c601c"}},
    "staticQueryHashes": ["2619113677","3706406642","417421954"]}